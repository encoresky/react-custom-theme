{"version":3,"sources":["../../src/constants.js","../../src/context.js","../../src/hooks.js","../../src/ThemeProvider.js","Colors.js","Home.js","Setting.js","App.js","index.js"],"names":["ThemeModes","ThemeContext","React","createContext","themeMode","theme","mode","isDarkTheme","setTheme","_","useTheme","useContext","children","darkTheme","lightTheme","setThemeMode","onChangeTheme","newTheme","deviceColorScheme","globalContent","changeTheme","React.createElement","Provider","value","light","primary","secondary","background","dark","Home","backgroundStyle","backgroundColor","flex","textStyle","color","style","Settings","onPress","App","Setting","ReactDOM","render","document","getElementById"],"mappings":"oPASaA,EACJ,QADIA,EAEL,OAFKA,EAGG,eCKHC,EAAeC,IAAMC,cAXL,CAC3BC,UAAW,QACXC,MAAO,CAAEC,KAAM,SACfC,aAAa,EACbC,SAAU,SAACC,OCPAC,EAAW,kBAAMR,IAAMS,WAAWV,I,ECEzB,SAAC,GAIjB,IAHJW,EAGI,EAHJA,SAGI,IAFJC,iBAEI,MAFQ,CAAEP,KAAMN,GAEhB,MADJc,kBACI,MADS,CAAER,KAAMN,GACjB,EAKJ,EAA0BE,mBAAeY,GAAlCT,EAAP,KAAcG,EAAd,KAMA,EAAkCN,mBAAeF,GAA1CI,EAAP,KAAkBW,EAAlB,KAOMC,EAAgBd,uBACpB,SAACe,EAAUC,GACTH,EAAaE,GAGXT,EADES,IAAajB,EACgB,SAAtBkB,EAA+BL,EAAYC,EAE3CG,IAAajB,EAAkBa,EAAYC,KAGxD,CAACD,EAAWC,IAmBRK,EAAgB,CACpBf,UAAWA,EACXC,MAAOA,EACPG,SAhBsBN,mBACtB,iBAAO,CACLkB,YAAa,SAAOH,GAAT,IAAsB,OAE/BD,EAAcC,EADY,uBADK,kBAAtB,uCAKb,CAACD,IASyBI,YAC1Bb,YAAaF,EAAMC,OAASN,GAM9B,OACEqB,wBAACpB,EAAaqB,SAAdD,CAAuBE,MAAOJ,GAC3BP,ICpEMY,EAAQ,CACnBlB,KAAM,QACNmB,QAAS,UACTC,UAAW,UACXC,WAAY,WAGDC,EAAO,CAClBtB,KAAM,OACNmB,QAAS,UACTC,UAAW,UACXC,WAAY,WCWCE,EAnBF,WACX,MAA+BnB,IAAvBL,EAAR,EAAQA,MAAOE,EAAf,EAAeA,YAETuB,EAAkB,CACtBC,gBAAiB1B,EAAMsB,WACvBK,KAAM,GAGFC,EAAY,CAChBC,MAAO3B,EAAc,OAAS,QAGhC,OACE,yBAAK4B,MAAOL,GACV,0BAAMK,MAAOF,GAAb,wBCESG,EAhBE,WACf,IAAQ5B,EAAaE,IAAbF,SAMR,OACE,6BACE,4BAAQ6B,QANI,WACd7B,EAASR,KAML,yDCEOsC,EATH,WACV,OACE,kBAAC,EAAD,CAAezB,UAAWe,EAAMd,WAAYU,GAC1C,kBAAC,EAAD,MACA,kBAACe,EAAD,QCJNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.3b63832f.chunk.js","sourcesContent":["/**\n * Theme modes\n * 1. light theme applied when light mode is selected\n * 2. light dark applied when dark mode is selected\n * 3. if device theme mode is selected then it fetch the theme mode of device\n * and applied it,\n * 4. Device theme mode only work in device which support dark mode\n */\n\nexport const ThemeModes = {\n  LIGHT: 'light',\n  DARK: 'dark',\n  DEVICE_THEME: 'device theme'\n}\n","import React from 'react'\n\n/**\n * These are default values for theme\n * initially we are applying light them and initializing other variables according to it\n */\nconst contextDefaultValues = {\n  themeMode: 'light',\n  theme: { mode: 'light' },\n  isDarkTheme: false,\n  setTheme: (_) => {}\n}\n\n/**\n * theme context\n * It provide real time changes to all app components when theme is changed\n */\nexport const ThemeContext = React.createContext(contextDefaultValues)\n","import React from 'react'\nimport { ThemeContext } from './context'\n\nexport const useTheme = () => React.useContext(ThemeContext)\n","import * as React from 'react'\n\nimport { ThemeModes } from './constants'\nimport { ThemeContext } from './context'\n\nconst ThemeProvider = ({\n  children,\n  darkTheme = { mode: ThemeModes.DARK },\n  lightTheme = { mode: ThemeModes.LIGHT }\n}) => {\n  /**\n   * @theme object contain color values for selected theme. it also have a additional parameter 'mode' which\n   * determine if selected theme is light or dark.\n   */\n  const [theme, setTheme] = React.useState(lightTheme)\n\n  /**\n   * @themeMode is type of mode which is selected for applying theme. it can be light, dark or device theme.\n   * if device theme is selected then it will apply light or dark theme based on device theme.\n   */\n  const [themeMode, setThemeMode] = React.useState(ThemeModes.LIGHT)\n\n  /**\n   * It is a common method to set new theme\n   * @param newTheme new theme to be set\n   * @param deviceColorScheme device color scheme\n   */\n  const onChangeTheme = React.useCallback(\n    (newTheme, deviceColorScheme) => {\n      setThemeMode(newTheme)\n\n      if (newTheme === ThemeModes.DEVICE_THEME) {\n        setTheme(deviceColorScheme === 'dark' ? darkTheme : lightTheme)\n      } else {\n        setTheme(newTheme === ThemeModes.DARK ? darkTheme : lightTheme)\n      }\n    },\n    [darkTheme, lightTheme]\n  )\n\n  /**\n   * Change theme method\n   */\n  const changeThemeMemo = React.useMemo(\n    () => ({\n      changeTheme: async (newTheme) => {\n        const deviceColorScheme = 'Device color Scheme'\n        onChangeTheme(newTheme, deviceColorScheme)\n      }\n    }),\n    [onChangeTheme]\n  )\n\n  /**\n   * content to be exported for external use\n   */\n  const globalContent = {\n    themeMode: themeMode,\n    theme: theme,\n    setTheme: changeThemeMemo.changeTheme,\n    isDarkTheme: theme.mode === ThemeModes.DARK\n  }\n\n  /**\n   * ThemeContext Provider - it wrap application\n   */\n  return (\n    <ThemeContext.Provider value={globalContent}>\n      {children}\n    </ThemeContext.Provider>\n  )\n}\n\nexport default ThemeProvider\n","export const light = {\n  mode: 'light',\n  primary: '#4e9cdb',\n  secondary: '#4e9cdb',\n  background: '#ffffff'\n}\n\nexport const dark = {\n  mode: 'dark',\n  primary: '#0a5897',\n  secondary: '#0a5897',\n  background: '#000000'\n}\n","import React from 'react'\nimport { useTheme } from 'react-custom-theme'\n\nconst Home = () => {\n  const { theme, isDarkTheme } = useTheme()\n\n  const backgroundStyle = {\n    backgroundColor: theme.background,\n    flex: 1\n  }\n\n  const textStyle = {\n    color: isDarkTheme ? '#fff' : '#000'\n  }\n\n  return (\n    <div style={backgroundStyle}>\n      <span style={textStyle}>React Custom Theme</span>\n    </div>\n  )\n}\n\nexport default Home","import React from 'react'\nimport { ThemeModes, useTheme } from 'react-custom-theme'\n\nconst Settings = () => {\n  const { setTheme } = useTheme()\n\n  const onPress = () => {\n    setTheme(ThemeModes.DARK)\n  }\n\n  return (\n    <div>\n      <button onPress={onPress}>\n        <span>Change to dark theme</span>\n      </button>\n    </div>\n  )\n}\n\nexport default Settings","import React from 'react'\nimport ThemeProvider from 'react-custom-theme'\nimport { dark, light } from './Colors'\nimport Home from './Home'\nimport Setting from './Setting'\n\nconst App = () => {\n  return (\n    <ThemeProvider darkTheme={dark} lightTheme={light}>\n      <Home />\n      <Setting />\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}